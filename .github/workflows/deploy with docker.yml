name: Deploy Backend App with Docker

on:
  workflow_dispatch:
    inputs:
      target-env:
        required: true
        type: environment

jobs:
  build:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.target-env }}
    steps:
    - name: Logs
      run: echo '### The deployment is made on the `${{ inputs.target-env }}` machine' >> $GITHUB_STEP_SUMMARY
      
    - uses: actions/checkout@v4
    - name: set vars
      id: vars
      run: |
        echo ::set-output name=BRANCH::${GITHUB_REF#refs/heads/}
        echo ::set-output name=HASH::$(git rev-parse --short ${GITHUB_SHA})
        echo ::set-output name=DATE::$(date +'%d-%m-%Y')
        echo ::set-output name=JWT_TOKEN::$(python scriptJWT.py ${{ secrets.service_account_id }} ${{ secrets.key_id }} "${{ secrets.PRIVATE_KEY }}")
        if [ "${{ inputs.target-env }}" == "prod" ]; then
          echo ::set-output name=ENVIRONMENT::"Production"
        else 
          echo ::set-output name=ENVIRONMENT::"Development"
        fi
        
    - name: set imagename
      id: imagename
      run: echo ::set-output name=IMAGENAME::${t-bc-backend-${{ steps.vars.outputs.BRANCH }}-${{ steps.vars.outputs.DATE }}} 

    - name: App Settings Variable Substitution
      uses: microsoft/variable-substitution@v1
      with:
        files: 'BusinessCalendar/appsettings.Production.json'
      env:
        dbServerHost: "${{ vars.DBSERVERHOST }}"
        dbServerPort: "${{ vars.DBSERVERPORT }}"
        dbName: "${{ vars.DBNAME }}"
        dbAdminLogin: "${{ vars.DBADMINLOGIN }}"
        dbAdminPassword: "${{ secrets.DBADMINPASSWORD }}"
        YCAccessKey: "${{ secrets.ACCESS_KEY_ID }}"
        YCSecretKey: "${{ secrets.SECRET_ACCESS_KEY }}"
        YCBucketName: "${{ vars.YCBUCKETNAME }}"
        
    - name: build
      run: |
        echo '### Name image: `${{ steps.imagename.outputs.IMAGENAME }}:${{ steps.vars.outputs.HASH }}` ' >> $GITHUB_STEP_SUMMARY
        docker build . -t cr.yandex/${{ vars.ID_CONTAINER_REGISTRY }}/${{ steps.imagename.outputs.IMAGENAME }}:${{ steps.vars.outputs.HASH }}
        
    - name: Login to Yandex Cloud Container Registry
      id: login-cr
      uses: yc-actions/yc-cr-login@v1
      with:
        yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

    - name: upload in Container Registry
      run: docker push cr.yandex/${{ vars.ID_CONTAINER_REGISTRY }}/${{ steps.imagename.outputs.IMAGENAME }}:${{ steps.vars.outputs.HASH }}

    - name: creating a migration
      run: |
        dotnet tool install --global dotnet-ef
        dotnet tool restore
        cd BusinessCalendar
        dotnet ef migrations script -o ../migration-${{ steps.vars.outputs.BRANCH }}-${{ steps.vars.outputs.HASH }}-${{ steps.vars.outputs.DATE }}.txt
        echo '### Migration name: `migration-${{ steps.vars.outputs.BRANCH }}-${{ steps.vars.outputs.HASH }}-${{ steps.vars.outputs.DATE }}.txt` ' >> $GITHUB_STEP_SUMMARY
        
    - name: upload migration in yandex storage
      uses: nekitcorp/yandex-storage-website-action@v2
      with:
        access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        bucket: ${{ vars.MIGRATION_BUCKET }}
        include: migration-${{ steps.vars.outputs.BRANCH }}-${{ steps.vars.outputs.HASH }}-${{ steps.vars.outputs.DATE }}.txt
        
    - name: connect to vm and deploy 
      uses: appleboy/ssh-action@v1.0.0
      env: 
        IMAGE: cr.yandex/${{ vars.ID_CONTAINER_REGISTRY }}/${{ steps.imagename.outputs.IMAGENAME }}:${{ steps.vars.outputs.HASH }}
        TOKEN: ${{ steps.vars.outputs.JWT_TOKEN }}
        ENVIRONMENT: ${{ steps.vars.outputs.ENVIRONMENT }}
      with:
        host: ${{ vars.HOST }}
        username: ${{ vars.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ vars.PORT }}
        proxy_host: ${{ vars.PROXY_HOST }}
        proxy_username: ${{ vars.PROXY_USERNAME }}
        proxy_key: ${{ secrets.PROXY_KEY }}
        proxy_port: ${{ vars.PROXY_PORT }}
        envs: IMAGE,TOKEN,ENVIRONMENT
        script: |
          JWT_TOKEN="$TOKEN"
          DOTNET_ENVIRONMENT="$ENVIRONMENT"
          sudo docker stop last_backend
          sudo docker rm last_backend
          sudo docker pull $IMAGE
          sudo docker run -d --net=host --restart=always --name=last_backend $IMAGE
